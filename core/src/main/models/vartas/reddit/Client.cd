package vartas.reddit;

import java.io.IOException.IOException;
import java.lang.String.String;
import java.lang.InterruptedException.InterruptedException;
import java.time.Instant.Instant;
import java.time.LocalDateTime.LocalDateTime;
import java.util.Optional.Optional;
import java.util.List.List;
import org.json.JSONObject.JSONObject;
import vartas.reddit.types.Types.SubredditType;
import vartas.reddit.types.Types.LinkType;
import vartas.reddit.types.Types.CommentType;
import vartas.reddit.types.Types.TrendingSubreddits;
import vartas.reddit.types.Subreddit.Rules;
import vartas.reddit.exceptions.Exceptions.HttpException;
import vartas.reddit.exceptions.Exceptions.RateLimiterException;
import vartas.reddit.Client.Client.Duration;
//Bug, should be Client.Subreddit.Query
import vartas.reddit.Subreddit.Subreddit.Query;
import vartas.reddit.query.Query.QueryBest;
import vartas.reddit.query.Query.QueryById;
import vartas.reddit.query.Query.QueryComments;
import vartas.reddit.query.Query.QueryControversial;
import vartas.reddit.query.Query.QueryDuplicates;
import vartas.reddit.query.Query.QueryHot;
import vartas.reddit.query.Query.QueryNew;
import vartas.reddit.query.Query.QueryRising;
import vartas.reddit.query.Query.QuerySort;
import vartas.reddit.query.Query.QueryTop;
import vartas.reddit.query.Query.QueryRandom;

public classdiagram Client {
    public abstract class Client {
        - Optional<Token> token;
        - UserAgent userAgent;

        + abstract void login(Duration duration) throws IOException, HttpException, RateLimiterException, InterruptedException;
        + abstract void login() throws IOException, HttpException, RateLimiterException, InterruptedException;
        + abstract void logout() throws IOException, HttpException, RateLimiterException, InterruptedException;
        # abstract void refresh() throws IOException, HttpException, RateLimiterException, InterruptedException;
        + abstract Subreddit getSubreddit(String name) throws IOException, HttpException, InterruptedException;
        //Listings
        + abstract TrendingSubreddits getTrendingSubreddits() throws IOException, HttpException, InterruptedException;
        + abstract QueryBest<Link> getBestLinks();
        //TODO `String...` is turned into `String`
        //+ abstract QueryById getLinksById(String... names) throws InterruptedException, IOException, HttpException {
        + abstract QueryComments getComments(String article);
        + abstract QueryControversial<Link> getControversialLinks();
        + abstract QueryDuplicates getDuplicates(String article);
        + abstract QueryHot<Link> getHotLinks();
        + abstract QueryNew<Link> getNewLinks();
        + abstract QueryRandom getRandomLink();
        + abstract QueryRising<Link> getRisingLinks();
        + abstract QueryTop<Link> getTopLinks();
        //+ abstract QuerySort<Link> getSortedLinks();
    }

    public abstract class Subreddit extends SubredditType{
        + abstract Rules getRules() throws IOException, HttpException, RateLimiterException, InterruptedException;
        + abstract Query getSearch();
        + abstract String getSidebar() throws IOException, HttpException, RateLimiterException, InterruptedException;
        + abstract Link getSticky(int index) throws IOException, HttpException, RateLimiterException, InterruptedException;
        //Listings
        + abstract QueryComments getComments(String article);
        + abstract QueryControversial<Link> getControversialLinks();
        + abstract QueryHot<Link> getHotLinks();
        + abstract QueryNew<Link> getNewLinks();
        + abstract QueryRandom getRandomLink();
        + abstract QueryRising<Link> getRisingLinks();
        + abstract QueryTop<Link> getTopLinks();
        //+ abstract QuerySort<Link> getSortedLinks();
    }

    public abstract class Link extends LinkType{

    }

    public abstract class Comment extends CommentType{

    }

    public class Token{
        <<key="access_token">>
        - String accessToken;
        <<key="refresh_token">>
        - Optional<String> refreshToken;
        <<key="expires_in">>
        - int expiresIn;
        <<key="device_id">>
        - String deviceId;
    }

    public class UserAgent{
        - String platform;
        - String name;
        - String version;
        - String author;
    }
}