package vartas.jra;

import java.io.IOException.IOException;
import java.lang.String.String;
import java.lang.Object.Object;
import java.lang.InterruptedException.InterruptedException;
import java.time.Instant.Instant;
import java.time.LocalDateTime.LocalDateTime;
import java.util.Optional.Optional;
import java.util.List.List;
import org.json.JSONObject.JSONObject;
import vartas.jra.query.QueryOne.QueryOne;
import vartas.jra.query.QueryMany.QueryMany;
import vartas.jra.Account.Account;
import vartas.jra.Account.Account;
import vartas.jra.types.Types.Thing;
import vartas.jra.types.Types.SubredditType;
import vartas.jra.types.Types.LinkType;
import vartas.jra.types.Types.CommentType;
import vartas.jra.types.Types.TrendingSubreddits;
import vartas.jra.types.Trophy.TrophyList;
import vartas.jra.types.User.UserList;
import vartas.jra.types.Karma.KarmaList;
import vartas.jra.types.Rule.Rules;
import vartas.jra.types.Preferences.Preferences;
import vartas.jra.types.Identity.Identity;
import vartas.jra.types.Messaging.Messaging;
import vartas.jra.exceptions.Exceptions.HttpException;
import vartas.jra.exceptions.Exceptions.RateLimiterException;
import vartas.jra.Client.Client.Duration;

public classdiagram Client {
    public abstract class Client {
        - Optional<Token> token;
        - UserAgent userAgent;

        + abstract void login(Duration duration) throws IOException, HttpException, RateLimiterException, InterruptedException;
        + abstract void login() throws IOException, HttpException, RateLimiterException, InterruptedException;
        + abstract void logout() throws IOException, HttpException, RateLimiterException, InterruptedException;
        # abstract void refresh() throws IOException, HttpException, RateLimiterException, InterruptedException;
        + abstract Subreddit getSubreddit(String name) throws IOException, HttpException, InterruptedException;
        //Account
        + abstract QueryOne<Identity> getMe();
        + abstract QueryOne<UserList> getBlocked();
        + abstract QueryOne<UserList> getFriends();
        + abstract QueryOne<KarmaList> getKarma();
        + abstract QueryOne<Preferences> getPreferences();
        + abstract QueryOne<TrophyList> getTrophies();
        + abstract QueryOne<UserList> getPreferencesBlocked();
        + abstract QueryOne<UserList> getPreferencesFriends();
        + abstract QueryOne<Messaging> getPreferencesMessaging();
        + abstract QueryOne<UserList> getPreferencesTrusted();
        //Captcha
        + abstract QueryOne<Boolean> needsCaptcha();
        //Listings
        + abstract TrendingSubreddits getTrendingSubreddits() throws IOException, HttpException, RateLimiterException, InterruptedException ;
        + abstract QueryMany<Link> getBestLinks();
        + abstract QueryMany<Link> getLinksById(String[] names);
        + abstract QueryOne<Submission> getComments(String article);
        + abstract QueryMany<Link> getControversialLinks();
        + abstract QueryOne<Duplicate> getDuplicates(String article);
        + abstract QueryMany<Link> getHotLinks();
        + abstract QueryMany<Link> getNewLinks();
        + abstract QueryOne<Submission> getRandomSubmission();
        + abstract QueryMany<Link> getRisingLinks();
        + abstract QueryMany<Link> getTopLinks();
        //Search
        + abstract QueryMany<Thing> getSearch();
        //Users
        + abstract QueryOne<Account> getAccount(String name);
    }

    public abstract class Token{
        <<key="access_token">>
        - String accessToken;
        <<key="refresh_token">>
        - Optional<String> refreshToken;
        <<key="expires_in">>
        - int lifetime;
        <<key="device_id">>
        - Optional<String> deviceId;

        public abstract boolean isExpired();
    }

    public class UserAgent{
        - String platform;
        - String name;
        - String version;
        - String author;
    }
}