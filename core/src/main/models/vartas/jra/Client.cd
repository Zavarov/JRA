package vartas.jra;

import okhttp3.Response.Response;
import java.io.IOException.IOException;
import java.lang.String.String;
import java.lang.InterruptedException.InterruptedException;
import java.util.Optional.Optional;
import vartas.jra.Account.Account;
import vartas.jra.FrontPage.FrontPage;
import vartas.jra.SelfAccount.SelfAccount;
import vartas.jra.Client.Client.Duration;
import vartas.jra.query.QueryInternal.QueryInternal;
import vartas.jra.query.QueryOne.QueryOne;
import vartas.jra.query.QueryMany.QueryMany;
import vartas.jra.query.QueryPost.QueryPost;
import vartas.jra.types.Types.Thing;
import vartas.jra.types.Types.TrendingSubreddits;
import vartas.jra.types.Trophy.TrophyList;
import vartas.jra.types.User.User;
import vartas.jra.types.User.UserList;
import vartas.jra.types.UserData.UserDataMap;
import vartas.jra.types.Karma.KarmaList;
import vartas.jra.types.Preferences.Preferences;
import vartas.jra.types.Messaging.Messaging;
import vartas.jra.exceptions.Exceptions.HttpException;
import vartas.jra.exceptions.Exceptions.RateLimiterException;

public classdiagram Client {
    public abstract class Client {
        - Optional<Token> token;
        - UserAgent userAgent;

        + abstract void login(Duration duration) throws IOException, HttpException, RateLimiterException, InterruptedException;
        + abstract void login() throws IOException, HttpException, RateLimiterException, InterruptedException;
        + abstract void logout() throws IOException, HttpException, RateLimiterException, InterruptedException;
        # abstract void refresh() throws IOException, HttpException, RateLimiterException, InterruptedException;
        + abstract Subreddit getSubreddit(String name) throws IOException, HttpException, InterruptedException;

        + abstract QueryInternal<FrontPage> getFrontPage();
        //Account
        + abstract QueryOne<SelfAccount> getMe();
        //Captcha
        + abstract QueryOne<Boolean> needsCaptcha();
        //Listings
        + abstract TrendingSubreddits getTrendingSubreddits() throws IOException, HttpException, RateLimiterException, InterruptedException ;
        + abstract QueryMany<Link> getLinksById(String[] names);
        + abstract QueryOne<Submission> getComments(String article);
        + abstract QueryOne<Duplicate> getDuplicates(String article);
        //Users
        + abstract QueryOne<UserDataMap> getUserDataByAccountIds();
        + abstract QueryOne<Boolean> getUsernameAvailable();
        + abstract QueryOne<Account> getAccount(String name);

    }

    public abstract class RateLimiter{
        /**
         * Approximate number of requests used in this period.
         */
        - long used;
        /**
         * Approximate number of requests left to use.
         */
        - long remaining;
        /**
         * Approximate number of seconds to end of period.
         */
        - long reset;

        public abstract void update(Response response);

        public abstract void acquire() throws InterruptedException;
    }

    public abstract class Token{
        <<key="access_token">>
        - String accessToken;
        <<key="refresh_token">>
        - Optional<String> refreshToken;
        <<key="expires_in">>
        - int lifetime;
        <<key="device_id">>
        - Optional<String> deviceId;

        public abstract boolean isExpired();
    }

    public class UserAgent{
        - String platform;
        - String name;
        - String version;
        - String author;
    }
}